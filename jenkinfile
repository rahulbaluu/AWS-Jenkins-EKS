pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID = credentials('Access_key_ID')
        AWS_SECRET_ACCESS_KEY = credentials('Secret_access_key')
        AWS_DEFAULT_REGION = "eu-west-2"
        REPO_NAME  = 'job-application-app'
        AWS_ACCOUNT_ID = '148761665406'
        ECR_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${REPO_NAME}"
        CLUSTER_NAME = 'job-application'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'git@github.com:rahulbaluu/AWS-Jenkins-EKS.git']])
                }
            }
        }

        stage('Login to AWS ECR') {
            steps {
                script {
                    // Log in to AWS ECR
                    sh """
                    aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_URI}
                    """
                }
            }
        }

        stage('Create ECR Repository (if not exists)') {
            steps {
                script {
                    // Create the ECR repository if it doesn't exist
                    sh """
                    aws ecr describe-repositories --repository-names ${REPO_NAME} --region ${AWS_DEFAULT_REGION} || aws ecr create-repository --repository-name ${REPO_NAME} --region ${AWS_DEFAULT_REGION}
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('EKS') {
                        // Build the Docker image
                        sh "docker build -t ${REPO_NAME} ."
                    }
                }
            }
        }

        stage('Tag Docker Image') {
            steps {
                script {
                    // Tag the Docker image with the ECR URI
                    sh "docker tag ${REPO_NAME}:latest ${ECR_URI}:latest"
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    // Push the Docker image to ECR
                    sh "docker push ${ECR_URI}:latest"
                }
            }
        }

        stage('Create EKS Cluster') {
            steps {
                script {
                    // Create EKS Cluster with eksctl (optional, only if needed)
                    sh """
                    eksctl create cluster --name ${CLUSTER_NAME} --region ${AWS_DEFAULT_REGION} --node-type t3.medium --nodes 3
                    """
                }
            }
        }

        stage('Get Nodes from EKS Cluster') {
            steps {
                script {
                    // Get nodes from the created EKS cluster using kubectl
                    sh """
                    aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name ${CLUSTER_NAME}
                    kubectl get nodes
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    dir('EKS') {
                       // Apply deployment and service
                       sh """
                       kubectl apply -f app_deployment.yaml
                       kubectl apply -f app_service.yaml
                       """
                    }
                }
            }
        }

        stage('Check Kubernetes Resources') {
            steps {
                script {
                    // Check if pods and services are running properly
                    sh """
                    kubectl get pods
                    kubectl get svc
                    kubectl get svc flask-app-service
                    kubectl logs flask-app-deployment-8474ff8c4c-gz2t6
                    kubectl logs flask-app-deployment-8474ff8c4c-qc4wl
                    """
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker images after the job runs
            sh 'docker system prune -f'
        }
    }
}
